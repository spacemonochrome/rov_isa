
stm_rov_raspi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e8  080028e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028e8  080028e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e8  080028e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080028fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080028fc  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000968c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016cd  00000000  00000000  000296c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0002b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017652  00000000  00000000  0002c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b348  00000000  00000000  000439fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f7f  00000000  00000000  0004ed42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f78  00000000  00000000  000d8d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a8 	.word	0x080028a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028a8 	.word	0x080028a8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe2a 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 fa78 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fc40 	bl	80009dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 fb36 	bl	80007cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000160:	f000 fbae 	bl	80008c0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000164:	f000 fc10 	bl	8000988 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000168:	f000 faae 	bl	80006c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000172:	4876      	ldr	r0, [pc, #472]	; (800034c <main+0x200>)
 8000174:	f001 f906 	bl	8001384 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000178:	210c      	movs	r1, #12
 800017a:	4875      	ldr	r0, [pc, #468]	; (8000350 <main+0x204>)
 800017c:	f001 fd84 	bl	8001c88 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // motor1
 8000180:	2100      	movs	r1, #0
 8000182:	4874      	ldr	r0, [pc, #464]	; (8000354 <main+0x208>)
 8000184:	f001 fd80 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // motor2
 8000188:	2104      	movs	r1, #4
 800018a:	4872      	ldr	r0, [pc, #456]	; (8000354 <main+0x208>)
 800018c:	f001 fd7c 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // motor3
 8000190:	2108      	movs	r1, #8
 8000192:	4870      	ldr	r0, [pc, #448]	; (8000354 <main+0x208>)
 8000194:	f001 fd78 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // motor4
 8000198:	210c      	movs	r1, #12
 800019a:	486e      	ldr	r0, [pc, #440]	; (8000354 <main+0x208>)
 800019c:	f001 fd74 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // motor5
 80001a0:	2100      	movs	r1, #0
 80001a2:	486d      	ldr	r0, [pc, #436]	; (8000358 <main+0x20c>)
 80001a4:	f001 fd70 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // motor6
 80001a8:	2104      	movs	r1, #4
 80001aa:	486b      	ldr	r0, [pc, #428]	; (8000358 <main+0x20c>)
 80001ac:	f001 fd6c 	bl	8001c88 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset(motorverisi, 80, 6*sizeof(*motorverisi));
 80001b0:	2206      	movs	r2, #6
 80001b2:	2150      	movs	r1, #80	; 0x50
 80001b4:	4869      	ldr	r0, [pc, #420]	; (800035c <main+0x210>)
 80001b6:	f002 fb6f 	bl	8002898 <memset>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4, 0);
 80001ba:	4b65      	ldr	r3, [pc, #404]	; (8000350 <main+0x204>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2200      	movs	r2, #0
 80001c0:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80001c2:	4b64      	ldr	r3, [pc, #400]	; (8000354 <main+0x208>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2200      	movs	r2, #0
 80001c8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 80001ca:	4b62      	ldr	r3, [pc, #392]	; (8000354 <main+0x208>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2200      	movs	r2, #0
 80001d0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 0);
 80001d2:	4b60      	ldr	r3, [pc, #384]	; (8000354 <main+0x208>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);
 80001da:	4b5e      	ldr	r3, [pc, #376]	; (8000354 <main+0x208>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2200      	movs	r2, #0
 80001e0:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 80001e2:	4b5d      	ldr	r3, [pc, #372]	; (8000358 <main+0x20c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2200      	movs	r2, #0
 80001e8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80001ea:	4b5b      	ldr	r3, [pc, #364]	; (8000358 <main+0x20c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2200      	movs	r2, #0
 80001f0:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
	  memset(receivedData, 0, 7*sizeof(*receivedData));
 80001f2:	2207      	movs	r2, #7
 80001f4:	2100      	movs	r1, #0
 80001f6:	485a      	ldr	r0, [pc, #360]	; (8000360 <main+0x214>)
 80001f8:	f002 fb4e 	bl	8002898 <memset>
	  if (HAL_UART_Receive(&huart3, receivedData, sizeof(receivedData), 100) == HAL_OK)
 80001fc:	2364      	movs	r3, #100	; 0x64
 80001fe:	2208      	movs	r2, #8
 8000200:	4957      	ldr	r1, [pc, #348]	; (8000360 <main+0x214>)
 8000202:	4858      	ldr	r0, [pc, #352]	; (8000364 <main+0x218>)
 8000204:	f002 f9aa 	bl	800255c <HAL_UART_Receive>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8149 	bne.w	80004a2 <main+0x356>
	  {
		  if (receivedData[6] == 'D' && receivedData[7] == '_')
 8000210:	4b53      	ldr	r3, [pc, #332]	; (8000360 <main+0x214>)
 8000212:	799b      	ldrb	r3, [r3, #6]
 8000214:	2b44      	cmp	r3, #68	; 0x44
 8000216:	d168      	bne.n	80002ea <main+0x19e>
 8000218:	4b51      	ldr	r3, [pc, #324]	; (8000360 <main+0x214>)
 800021a:	79db      	ldrb	r3, [r3, #7]
 800021c:	2b5f      	cmp	r3, #95	; 0x5f
 800021e:	d164      	bne.n	80002ea <main+0x19e>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000226:	4849      	ldr	r0, [pc, #292]	; (800034c <main+0x200>)
 8000228:	f001 f8ac 	bl	8001384 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800022c:	4b48      	ldr	r3, [pc, #288]	; (8000350 <main+0x204>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2200      	movs	r2, #0
 8000232:	641a      	str	r2, [r3, #64]	; 0x40
			  motorverisi[0] = receivedData[0];
 8000234:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <main+0x214>)
 8000236:	781a      	ldrb	r2, [r3, #0]
 8000238:	4b48      	ldr	r3, [pc, #288]	; (800035c <main+0x210>)
 800023a:	701a      	strb	r2, [r3, #0]
			  motorverisi[1] = receivedData[1];
 800023c:	4b48      	ldr	r3, [pc, #288]	; (8000360 <main+0x214>)
 800023e:	785a      	ldrb	r2, [r3, #1]
 8000240:	4b46      	ldr	r3, [pc, #280]	; (800035c <main+0x210>)
 8000242:	705a      	strb	r2, [r3, #1]
			  motorverisi[2] = receivedData[2];
 8000244:	4b46      	ldr	r3, [pc, #280]	; (8000360 <main+0x214>)
 8000246:	789a      	ldrb	r2, [r3, #2]
 8000248:	4b44      	ldr	r3, [pc, #272]	; (800035c <main+0x210>)
 800024a:	709a      	strb	r2, [r3, #2]
			  motorverisi[3] = receivedData[3];
 800024c:	4b44      	ldr	r3, [pc, #272]	; (8000360 <main+0x214>)
 800024e:	78da      	ldrb	r2, [r3, #3]
 8000250:	4b42      	ldr	r3, [pc, #264]	; (800035c <main+0x210>)
 8000252:	70da      	strb	r2, [r3, #3]
			  motorverisi[4] = receivedData[4];
 8000254:	4b42      	ldr	r3, [pc, #264]	; (8000360 <main+0x214>)
 8000256:	791a      	ldrb	r2, [r3, #4]
 8000258:	4b40      	ldr	r3, [pc, #256]	; (800035c <main+0x210>)
 800025a:	711a      	strb	r2, [r3, #4]
			  motorverisi[5] = receivedData[5];
 800025c:	4b40      	ldr	r3, [pc, #256]	; (8000360 <main+0x214>)
 800025e:	795a      	ldrb	r2, [r3, #5]
 8000260:	4b3e      	ldr	r3, [pc, #248]	; (800035c <main+0x210>)
 8000262:	715a      	strb	r2, [r3, #5]
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (4000 + ((motorverisi[0]-40)*50)));
 8000264:	4b3d      	ldr	r3, [pc, #244]	; (800035c <main+0x210>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	3b28      	subs	r3, #40	; 0x28
 800026a:	2232      	movs	r2, #50	; 0x32
 800026c:	fb02 f303 	mul.w	r3, r2, r3
 8000270:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000274:	4b37      	ldr	r3, [pc, #220]	; (8000354 <main+0x208>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, (4000 + ((motorverisi[1]-40)*50)));
 800027a:	4b38      	ldr	r3, [pc, #224]	; (800035c <main+0x210>)
 800027c:	785b      	ldrb	r3, [r3, #1]
 800027e:	3b28      	subs	r3, #40	; 0x28
 8000280:	2232      	movs	r2, #50	; 0x32
 8000282:	fb02 f303 	mul.w	r3, r2, r3
 8000286:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 800028a:	4b32      	ldr	r3, [pc, #200]	; (8000354 <main+0x208>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, (4000 + ((motorverisi[2]-40)*50)));
 8000290:	4b32      	ldr	r3, [pc, #200]	; (800035c <main+0x210>)
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	3b28      	subs	r3, #40	; 0x28
 8000296:	2232      	movs	r2, #50	; 0x32
 8000298:	fb02 f303 	mul.w	r3, r2, r3
 800029c:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80002a0:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <main+0x208>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, (4000 + ((motorverisi[3]-40)*50)));
 80002a6:	4b2d      	ldr	r3, [pc, #180]	; (800035c <main+0x210>)
 80002a8:	78db      	ldrb	r3, [r3, #3]
 80002aa:	3b28      	subs	r3, #40	; 0x28
 80002ac:	2232      	movs	r2, #50	; 0x32
 80002ae:	fb02 f303 	mul.w	r3, r2, r3
 80002b2:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80002b6:	4b27      	ldr	r3, [pc, #156]	; (8000354 <main+0x208>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	641a      	str	r2, [r3, #64]	; 0x40
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (4000 + ((motorverisi[4]-40)*50)));
 80002bc:	4b27      	ldr	r3, [pc, #156]	; (800035c <main+0x210>)
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	3b28      	subs	r3, #40	; 0x28
 80002c2:	2232      	movs	r2, #50	; 0x32
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80002cc:	4b22      	ldr	r3, [pc, #136]	; (8000358 <main+0x20c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (4000 + ((motorverisi[5]-40)*50)));
 80002d2:	4b22      	ldr	r3, [pc, #136]	; (800035c <main+0x210>)
 80002d4:	795b      	ldrb	r3, [r3, #5]
 80002d6:	3b28      	subs	r3, #40	; 0x28
 80002d8:	2232      	movs	r2, #50	; 0x32
 80002da:	fb02 f303 	mul.w	r3, r2, r3
 80002de:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80002e2:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <main+0x20c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	639a      	str	r2, [r3, #56]	; 0x38
 80002e8:	e0d5      	b.n	8000496 <main+0x34a>
		  }
		  else if(receivedData[6] != 0 && receivedData[7] != 0)
 80002ea:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <main+0x214>)
 80002ec:	799b      	ldrb	r3, [r3, #6]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f000 80d1 	beq.w	8000496 <main+0x34a>
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <main+0x214>)
 80002f6:	79db      	ldrb	r3, [r3, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	f000 80cc 	beq.w	8000496 <main+0x34a>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000304:	4811      	ldr	r0, [pc, #68]	; (800034c <main+0x200>)
 8000306:	f001 f83d 	bl	8001384 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 7999);
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <main+0x204>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000312:	641a      	str	r2, [r3, #64]	; 0x40
			  while(motorverisi[0] != 80 || motorverisi[1] != 80 || motorverisi[2] != 80 || motorverisi[3] != 80 || motorverisi[4] != 80 || motorverisi[5] != 80)
 8000314:	e08f      	b.n	8000436 <main+0x2ea>
			  {
				  while( x < 6)
				  {
					  if(motorverisi[x] == 80)
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <main+0x21c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a10      	ldr	r2, [pc, #64]	; (800035c <main+0x210>)
 800031c:	5cd3      	ldrb	r3, [r2, r3]
 800031e:	2b50      	cmp	r3, #80	; 0x50
 8000320:	d038      	beq.n	8000394 <main+0x248>
					  {

					  }
					  else if(motorverisi[x] > 80 && motorverisi[x] < 121)
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <main+0x21c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a0d      	ldr	r2, [pc, #52]	; (800035c <main+0x210>)
 8000328:	5cd3      	ldrb	r3, [r2, r3]
 800032a:	2b50      	cmp	r3, #80	; 0x50
 800032c:	d91e      	bls.n	800036c <main+0x220>
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <main+0x21c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <main+0x210>)
 8000334:	5cd3      	ldrb	r3, [r2, r3]
 8000336:	2b78      	cmp	r3, #120	; 0x78
 8000338:	d818      	bhi.n	800036c <main+0x220>
					  {
						  motorverisi[x]--;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <main+0x21c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a07      	ldr	r2, [pc, #28]	; (800035c <main+0x210>)
 8000340:	5cd2      	ldrb	r2, [r2, r3]
 8000342:	3a01      	subs	r2, #1
 8000344:	b2d1      	uxtb	r1, r2
 8000346:	4a05      	ldr	r2, [pc, #20]	; (800035c <main+0x210>)
 8000348:	54d1      	strb	r1, [r2, r3]
 800034a:	e023      	b.n	8000394 <main+0x248>
 800034c:	40011000 	.word	0x40011000
 8000350:	20000028 	.word	0x20000028
 8000354:	20000070 	.word	0x20000070
 8000358:	200000b8 	.word	0x200000b8
 800035c:	2000014c 	.word	0x2000014c
 8000360:	20000144 	.word	0x20000144
 8000364:	20000100 	.word	0x20000100
 8000368:	20000154 	.word	0x20000154
					  }
					  else if(motorverisi[x] < 80 && motorverisi[x] > 39)
 800036c:	4b60      	ldr	r3, [pc, #384]	; (80004f0 <main+0x3a4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a60      	ldr	r2, [pc, #384]	; (80004f4 <main+0x3a8>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	2b4f      	cmp	r3, #79	; 0x4f
 8000376:	d80d      	bhi.n	8000394 <main+0x248>
 8000378:	4b5d      	ldr	r3, [pc, #372]	; (80004f0 <main+0x3a4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a5d      	ldr	r2, [pc, #372]	; (80004f4 <main+0x3a8>)
 800037e:	5cd3      	ldrb	r3, [r2, r3]
 8000380:	2b27      	cmp	r3, #39	; 0x27
 8000382:	d907      	bls.n	8000394 <main+0x248>
					  {
						  motorverisi[x]++;
 8000384:	4b5a      	ldr	r3, [pc, #360]	; (80004f0 <main+0x3a4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a5a      	ldr	r2, [pc, #360]	; (80004f4 <main+0x3a8>)
 800038a:	5cd2      	ldrb	r2, [r2, r3]
 800038c:	3201      	adds	r2, #1
 800038e:	b2d1      	uxtb	r1, r2
 8000390:	4a58      	ldr	r2, [pc, #352]	; (80004f4 <main+0x3a8>)
 8000392:	54d1      	strb	r1, [r2, r3]
					  }
					  x++;
 8000394:	4b56      	ldr	r3, [pc, #344]	; (80004f0 <main+0x3a4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3301      	adds	r3, #1
 800039a:	4a55      	ldr	r2, [pc, #340]	; (80004f0 <main+0x3a4>)
 800039c:	6013      	str	r3, [r2, #0]
				  while( x < 6)
 800039e:	4b54      	ldr	r3, [pc, #336]	; (80004f0 <main+0x3a4>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b05      	cmp	r3, #5
 80003a4:	ddb7      	ble.n	8000316 <main+0x1ca>
				  }
				  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (4000 + ((motorverisi[0]-40)*50)));
 80003a6:	4b53      	ldr	r3, [pc, #332]	; (80004f4 <main+0x3a8>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	3b28      	subs	r3, #40	; 0x28
 80003ac:	2232      	movs	r2, #50	; 0x32
 80003ae:	fb02 f303 	mul.w	r3, r2, r3
 80003b2:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80003b6:	4b50      	ldr	r3, [pc, #320]	; (80004f8 <main+0x3ac>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, (4000 + ((motorverisi[1]-40)*50)));
 80003bc:	4b4d      	ldr	r3, [pc, #308]	; (80004f4 <main+0x3a8>)
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	3b28      	subs	r3, #40	; 0x28
 80003c2:	2232      	movs	r2, #50	; 0x32
 80003c4:	fb02 f303 	mul.w	r3, r2, r3
 80003c8:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80003cc:	4b4a      	ldr	r3, [pc, #296]	; (80004f8 <main+0x3ac>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, (4000 + ((motorverisi[2]-40)*50)));
 80003d2:	4b48      	ldr	r3, [pc, #288]	; (80004f4 <main+0x3a8>)
 80003d4:	789b      	ldrb	r3, [r3, #2]
 80003d6:	3b28      	subs	r3, #40	; 0x28
 80003d8:	2232      	movs	r2, #50	; 0x32
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80003e2:	4b45      	ldr	r3, [pc, #276]	; (80004f8 <main+0x3ac>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, (4000 + ((motorverisi[3]-40)*50)));
 80003e8:	4b42      	ldr	r3, [pc, #264]	; (80004f4 <main+0x3a8>)
 80003ea:	78db      	ldrb	r3, [r3, #3]
 80003ec:	3b28      	subs	r3, #40	; 0x28
 80003ee:	2232      	movs	r2, #50	; 0x32
 80003f0:	fb02 f303 	mul.w	r3, r2, r3
 80003f4:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80003f8:	4b3f      	ldr	r3, [pc, #252]	; (80004f8 <main+0x3ac>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	641a      	str	r2, [r3, #64]	; 0x40
				  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (4000 + ((motorverisi[4]-40)*50)));
 80003fe:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <main+0x3a8>)
 8000400:	791b      	ldrb	r3, [r3, #4]
 8000402:	3b28      	subs	r3, #40	; 0x28
 8000404:	2232      	movs	r2, #50	; 0x32
 8000406:	fb02 f303 	mul.w	r3, r2, r3
 800040a:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 800040e:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <main+0x3b0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (4000 + ((motorverisi[5]-40)*50)));
 8000414:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <main+0x3a8>)
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	3b28      	subs	r3, #40	; 0x28
 800041a:	2232      	movs	r2, #50	; 0x32
 800041c:	fb02 f303 	mul.w	r3, r2, r3
 8000420:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000424:	4b35      	ldr	r3, [pc, #212]	; (80004fc <main+0x3b0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	639a      	str	r2, [r3, #56]	; 0x38
				  x = 0;
 800042a:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <main+0x3a4>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
				  HAL_Delay(100);
 8000430:	2064      	movs	r0, #100	; 0x64
 8000432:	f000 fd1b 	bl	8000e6c <HAL_Delay>
			  while(motorverisi[0] != 80 || motorverisi[1] != 80 || motorverisi[2] != 80 || motorverisi[3] != 80 || motorverisi[4] != 80 || motorverisi[5] != 80)
 8000436:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <main+0x3a8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b50      	cmp	r3, #80	; 0x50
 800043c:	d1af      	bne.n	800039e <main+0x252>
 800043e:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <main+0x3a8>)
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	2b50      	cmp	r3, #80	; 0x50
 8000444:	d1ab      	bne.n	800039e <main+0x252>
 8000446:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <main+0x3a8>)
 8000448:	789b      	ldrb	r3, [r3, #2]
 800044a:	2b50      	cmp	r3, #80	; 0x50
 800044c:	d1a7      	bne.n	800039e <main+0x252>
 800044e:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <main+0x3a8>)
 8000450:	78db      	ldrb	r3, [r3, #3]
 8000452:	2b50      	cmp	r3, #80	; 0x50
 8000454:	d1a3      	bne.n	800039e <main+0x252>
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <main+0x3a8>)
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	2b50      	cmp	r3, #80	; 0x50
 800045c:	d19f      	bne.n	800039e <main+0x252>
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <main+0x3a8>)
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	2b50      	cmp	r3, #80	; 0x50
 8000464:	d19b      	bne.n	800039e <main+0x252>
			  }
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <main+0x3ac>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2200      	movs	r2, #0
 800046c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <main+0x3ac>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 0);
 8000476:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <main+0x3ac>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <main+0x3ac>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	641a      	str	r2, [r3, #64]	; 0x40
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <main+0x3b0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2200      	movs	r2, #0
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 800048e:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <main+0x3b0>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2200      	movs	r2, #0
 8000494:	639a      	str	r2, [r3, #56]	; 0x38
			  {
				  HAL_UART_Transmit (&huart3, (uint8_t*)bf, 1, 20);
			  }
			  */
		  }
		  memset(receivedData, 0, 7*sizeof(*receivedData));
 8000496:	2207      	movs	r2, #7
 8000498:	2100      	movs	r1, #0
 800049a:	4819      	ldr	r0, [pc, #100]	; (8000500 <main+0x3b4>)
 800049c:	f002 f9fc 	bl	8002898 <memset>
 80004a0:	e6a7      	b.n	80001f2 <main+0xa6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a8:	4816      	ldr	r0, [pc, #88]	; (8000504 <main+0x3b8>)
 80004aa:	f000 ff6b 	bl	8001384 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <main+0x3bc>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2200      	movs	r2, #0
 80004b4:	641a      	str	r2, [r3, #64]	; 0x40
		  while(motorverisi[0] != 80 || motorverisi[1] != 80 || motorverisi[2] != 80 || motorverisi[3] != 80 || motorverisi[4] != 80 || motorverisi[5] != 80)
 80004b6:	e08e      	b.n	80005d6 <main+0x48a>
		  {
			  while( x < 6)
			  {
				  if(motorverisi[x] == 80)
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <main+0x3a4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <main+0x3a8>)
 80004be:	5cd3      	ldrb	r3, [r2, r3]
 80004c0:	2b50      	cmp	r3, #80	; 0x50
 80004c2:	d037      	beq.n	8000534 <main+0x3e8>
				  {

				  }
				  else if(motorverisi[x] > 80 && motorverisi[x] < 121)
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <main+0x3a4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <main+0x3a8>)
 80004ca:	5cd3      	ldrb	r3, [r2, r3]
 80004cc:	2b50      	cmp	r3, #80	; 0x50
 80004ce:	d91d      	bls.n	800050c <main+0x3c0>
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <main+0x3a4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <main+0x3a8>)
 80004d6:	5cd3      	ldrb	r3, [r2, r3]
 80004d8:	2b78      	cmp	r3, #120	; 0x78
 80004da:	d817      	bhi.n	800050c <main+0x3c0>
				  {
					  motorverisi[x]--;
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <main+0x3a4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <main+0x3a8>)
 80004e2:	5cd2      	ldrb	r2, [r2, r3]
 80004e4:	3a01      	subs	r2, #1
 80004e6:	b2d1      	uxtb	r1, r2
 80004e8:	4a02      	ldr	r2, [pc, #8]	; (80004f4 <main+0x3a8>)
 80004ea:	54d1      	strb	r1, [r2, r3]
 80004ec:	e022      	b.n	8000534 <main+0x3e8>
 80004ee:	bf00      	nop
 80004f0:	20000154 	.word	0x20000154
 80004f4:	2000014c 	.word	0x2000014c
 80004f8:	20000070 	.word	0x20000070
 80004fc:	200000b8 	.word	0x200000b8
 8000500:	20000144 	.word	0x20000144
 8000504:	40011000 	.word	0x40011000
 8000508:	20000028 	.word	0x20000028
				  }
				  else if(motorverisi[x] < 80 && motorverisi[x] > 39)
 800050c:	4b4a      	ldr	r3, [pc, #296]	; (8000638 <main+0x4ec>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a4a      	ldr	r2, [pc, #296]	; (800063c <main+0x4f0>)
 8000512:	5cd3      	ldrb	r3, [r2, r3]
 8000514:	2b4f      	cmp	r3, #79	; 0x4f
 8000516:	d80d      	bhi.n	8000534 <main+0x3e8>
 8000518:	4b47      	ldr	r3, [pc, #284]	; (8000638 <main+0x4ec>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a47      	ldr	r2, [pc, #284]	; (800063c <main+0x4f0>)
 800051e:	5cd3      	ldrb	r3, [r2, r3]
 8000520:	2b27      	cmp	r3, #39	; 0x27
 8000522:	d907      	bls.n	8000534 <main+0x3e8>
				  {
					  motorverisi[x]++;
 8000524:	4b44      	ldr	r3, [pc, #272]	; (8000638 <main+0x4ec>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a44      	ldr	r2, [pc, #272]	; (800063c <main+0x4f0>)
 800052a:	5cd2      	ldrb	r2, [r2, r3]
 800052c:	3201      	adds	r2, #1
 800052e:	b2d1      	uxtb	r1, r2
 8000530:	4a42      	ldr	r2, [pc, #264]	; (800063c <main+0x4f0>)
 8000532:	54d1      	strb	r1, [r2, r3]
				  }
				  x++;
 8000534:	4b40      	ldr	r3, [pc, #256]	; (8000638 <main+0x4ec>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	4a3f      	ldr	r2, [pc, #252]	; (8000638 <main+0x4ec>)
 800053c:	6013      	str	r3, [r2, #0]
			  while( x < 6)
 800053e:	4b3e      	ldr	r3, [pc, #248]	; (8000638 <main+0x4ec>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b05      	cmp	r3, #5
 8000544:	ddb8      	ble.n	80004b8 <main+0x36c>
			  }
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (4000 + ((motorverisi[0]-40)*50)));
 8000546:	4b3d      	ldr	r3, [pc, #244]	; (800063c <main+0x4f0>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	3b28      	subs	r3, #40	; 0x28
 800054c:	2232      	movs	r2, #50	; 0x32
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000556:	4b3a      	ldr	r3, [pc, #232]	; (8000640 <main+0x4f4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, (4000 + ((motorverisi[1]-40)*50)));
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <main+0x4f0>)
 800055e:	785b      	ldrb	r3, [r3, #1]
 8000560:	3b28      	subs	r3, #40	; 0x28
 8000562:	2232      	movs	r2, #50	; 0x32
 8000564:	fb02 f303 	mul.w	r3, r2, r3
 8000568:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 800056c:	4b34      	ldr	r3, [pc, #208]	; (8000640 <main+0x4f4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, (4000 + ((motorverisi[2]-40)*50)));
 8000572:	4b32      	ldr	r3, [pc, #200]	; (800063c <main+0x4f0>)
 8000574:	789b      	ldrb	r3, [r3, #2]
 8000576:	3b28      	subs	r3, #40	; 0x28
 8000578:	2232      	movs	r2, #50	; 0x32
 800057a:	fb02 f303 	mul.w	r3, r2, r3
 800057e:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000582:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <main+0x4f4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, (4000 + ((motorverisi[3]-40)*50)));
 8000588:	4b2c      	ldr	r3, [pc, #176]	; (800063c <main+0x4f0>)
 800058a:	78db      	ldrb	r3, [r3, #3]
 800058c:	3b28      	subs	r3, #40	; 0x28
 800058e:	2232      	movs	r2, #50	; 0x32
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <main+0x4f4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	641a      	str	r2, [r3, #64]	; 0x40
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (4000 + ((motorverisi[4]-40)*50)));
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <main+0x4f0>)
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	3b28      	subs	r3, #40	; 0x28
 80005a4:	2232      	movs	r2, #50	; 0x32
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <main+0x4f8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (4000 + ((motorverisi[5]-40)*50)));
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <main+0x4f0>)
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	3b28      	subs	r3, #40	; 0x28
 80005ba:	2232      	movs	r2, #50	; 0x32
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <main+0x4f8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	639a      	str	r2, [r3, #56]	; 0x38
			  x = 0;
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <main+0x4ec>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
			  HAL_Delay(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f000 fc4b 	bl	8000e6c <HAL_Delay>
		  while(motorverisi[0] != 80 || motorverisi[1] != 80 || motorverisi[2] != 80 || motorverisi[3] != 80 || motorverisi[4] != 80 || motorverisi[5] != 80)
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <main+0x4f0>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b50      	cmp	r3, #80	; 0x50
 80005dc:	d1af      	bne.n	800053e <main+0x3f2>
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <main+0x4f0>)
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	2b50      	cmp	r3, #80	; 0x50
 80005e4:	d1ab      	bne.n	800053e <main+0x3f2>
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <main+0x4f0>)
 80005e8:	789b      	ldrb	r3, [r3, #2]
 80005ea:	2b50      	cmp	r3, #80	; 0x50
 80005ec:	d1a7      	bne.n	800053e <main+0x3f2>
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <main+0x4f0>)
 80005f0:	78db      	ldrb	r3, [r3, #3]
 80005f2:	2b50      	cmp	r3, #80	; 0x50
 80005f4:	d1a3      	bne.n	800053e <main+0x3f2>
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <main+0x4f0>)
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	2b50      	cmp	r3, #80	; 0x50
 80005fc:	d19f      	bne.n	800053e <main+0x3f2>
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0x4f0>)
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b50      	cmp	r3, #80	; 0x50
 8000604:	d19b      	bne.n	800053e <main+0x3f2>
		  }
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <main+0x4f4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <main+0x4f4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 0);
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <main+0x4f4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <main+0x4f4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <main+0x4f8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <main+0x4f8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	639a      	str	r2, [r3, #56]	; 0x38
	  memset(receivedData, 0, 7*sizeof(*receivedData));
 8000636:	e5dc      	b.n	80001f2 <main+0xa6>
 8000638:	20000154 	.word	0x20000154
 800063c:	2000014c 	.word	0x2000014c
 8000640:	20000070 	.word	0x20000070
 8000644:	200000b8 	.word	0x200000b8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	; 0x40
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2228      	movs	r2, #40	; 0x28
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f91e 	bl	8002898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800067a:	2300      	movs	r3, #0
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fe93 	bl	80013b4 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000694:	f000 f9fa 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f901 	bl	80018b8 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006bc:	f000 f9e6 	bl	8000a8c <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3740      	adds	r7, #64	; 0x40
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b092      	sub	sp, #72	; 0x48
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2220      	movs	r2, #32
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f8d0 	bl	8002898 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f8:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <MX_TIM1_Init+0xfc>)
 80006fa:	4a33      	ldr	r2, [pc, #204]	; (80007c8 <MX_TIM1_Init+0x100>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_TIM1_Init+0xfc>)
 8000700:	2208      	movs	r2, #8
 8000702:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <MX_TIM1_Init+0xfc>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_TIM1_Init+0xfc>)
 800070c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000710:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <MX_TIM1_Init+0xfc>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_TIM1_Init+0xfc>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_TIM1_Init+0xfc>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000724:	4827      	ldr	r0, [pc, #156]	; (80007c4 <MX_TIM1_Init+0xfc>)
 8000726:	f001 fa5f 	bl	8001be8 <HAL_TIM_PWM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000730:	f000 f9ac 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000740:	4619      	mov	r1, r3
 8000742:	4820      	ldr	r0, [pc, #128]	; (80007c4 <MX_TIM1_Init+0xfc>)
 8000744:	f001 fe0e 	bl	8002364 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800074e:	f000 f99d 	bl	8000a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	; 0x60
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	220c      	movs	r2, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_TIM1_Init+0xfc>)
 8000774:	f001 fb2a 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800077e:	f000 f985 	bl	8000a8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM1_Init+0xfc>)
 80007a6:	f001 fe3b 	bl	8002420 <HAL_TIMEx_ConfigBreakDeadTime>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80007b0:	f000 f96c 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM1_Init+0xfc>)
 80007b6:	f000 f9e5 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3748      	adds	r7, #72	; 0x48
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000028 	.word	0x20000028
 80007c8:	40012c00 	.word	0x40012c00

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_TIM2_Init+0xf0>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <MX_TIM2_Init+0xf0>)
 80007f8:	2208      	movs	r2, #8
 80007fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <MX_TIM2_Init+0xf0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000-1;
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_TIM2_Init+0xf0>)
 8000804:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <MX_TIM2_Init+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <MX_TIM2_Init+0xf0>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000816:	4829      	ldr	r0, [pc, #164]	; (80008bc <MX_TIM2_Init+0xf0>)
 8000818:	f001 f9e6 	bl	8001be8 <HAL_TIM_PWM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000822:	f000 f933 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	4619      	mov	r1, r3
 8000834:	4821      	ldr	r0, [pc, #132]	; (80008bc <MX_TIM2_Init+0xf0>)
 8000836:	f001 fd95 	bl	8002364 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000840:	f000 f924 	bl	8000a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	4619      	mov	r1, r3
 800085a:	4818      	ldr	r0, [pc, #96]	; (80008bc <MX_TIM2_Init+0xf0>)
 800085c:	f001 fab6 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000866:	f000 f911 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2204      	movs	r2, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_TIM2_Init+0xf0>)
 8000872:	f001 faab 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800087c:	f000 f906 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2208      	movs	r2, #8
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM2_Init+0xf0>)
 8000888:	f001 faa0 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000892:	f000 f8fb 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	220c      	movs	r2, #12
 800089a:	4619      	mov	r1, r3
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM2_Init+0xf0>)
 800089e:	f001 fa95 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80008a8:	f000 f8f0 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM2_Init+0xf0>)
 80008ae:	f000 f969 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000070 	.word	0x20000070

080008c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_TIM3_Init+0xc0>)
 80008e4:	4a27      	ldr	r2, [pc, #156]	; (8000984 <MX_TIM3_Init+0xc4>)
 80008e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <MX_TIM3_Init+0xc0>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <MX_TIM3_Init+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000-1;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_TIM3_Init+0xc0>)
 80008f6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_TIM3_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_TIM3_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000908:	481d      	ldr	r0, [pc, #116]	; (8000980 <MX_TIM3_Init+0xc0>)
 800090a:	f001 f96d 	bl	8001be8 <HAL_TIM_PWM_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f8ba 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4619      	mov	r1, r3
 8000926:	4816      	ldr	r0, [pc, #88]	; (8000980 <MX_TIM3_Init+0xc0>)
 8000928:	f001 fd1c 	bl	8002364 <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000932:	f000 f8ab 	bl	8000a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000936:	2360      	movs	r3, #96	; 0x60
 8000938:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_TIM3_Init+0xc0>)
 800094e:	f001 fa3d 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000958:	f000 f898 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2204      	movs	r2, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_TIM3_Init+0xc0>)
 8000964:	f001 fa32 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800096e:	f000 f88d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_TIM3_Init+0xc0>)
 8000974:	f000 f906 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000b8 	.word	0x200000b8
 8000984:	40000400 	.word	0x40000400

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART3_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 8000994:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009c0:	f001 fd7f 	bl	80024c2 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f85f 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000100 	.word	0x20000100
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_GPIO_Init+0xa8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <MX_GPIO_Init+0xa8>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_GPIO_Init+0xa8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a0e:	f043 0320 	orr.w	r3, r3, #32
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0320 	and.w	r3, r3, #32
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a58:	f000 fc94 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a76:	f000 fb01 	bl	800107c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3720      	adds	r7, #32
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40011000 	.word	0x40011000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x5c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x60>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_MspInit+0x60>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000

08000afc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10c      	bne.n	8000b28 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b26:	e022      	b.n	8000b6e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b30:	d10c      	bne.n	8000b4c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
}
 8000b4a:	e010      	b.n	8000b6e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_TIM_PWM_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10b      	bne.n	8000b6e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	61d3      	str	r3, [r2, #28]
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_TIM_PWM_MspInit+0x80>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
}
 8000b6e:	bf00      	nop
 8000b70:	371c      	adds	r7, #28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40000400 	.word	0x40000400

08000b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0318 	add.w	r3, r7, #24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a2e      	ldr	r2, [pc, #184]	; (8000c58 <HAL_TIM_MspPostInit+0xd4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d119      	bne.n	8000bd8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4823      	ldr	r0, [pc, #140]	; (8000c60 <HAL_TIM_MspPostInit+0xdc>)
 8000bd2:	f000 fa53 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bd6:	e03a      	b.n	8000c4e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be0:	d118      	bne.n	8000c14 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2302      	movs	r3, #2
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <HAL_TIM_MspPostInit+0xdc>)
 8000c0e:	f000 fa35 	bl	800107c <HAL_GPIO_Init>
}
 8000c12:	e01c      	b.n	8000c4e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_TIM_MspPostInit+0xe0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d117      	bne.n	8000c4e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_TIM_MspPostInit+0xd8>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c36:	23c0      	movs	r3, #192	; 0xc0
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_TIM_MspPostInit+0xdc>)
 8000c4a:	f000 fa17 	bl	800107c <HAL_GPIO_Init>
}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40012c00 	.word	0x40012c00
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40000400 	.word	0x40000400

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d131      	bne.n	8000cec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c92:	61d3      	str	r3, [r2, #28]
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000cce:	f000 f9d5 	bl	800107c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000ce8:	f000 f9c8 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004800 	.word	0x40004800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010c00 	.word	0x40010c00

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f875 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
	...

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d82:	f7ff ffe4 	bl	8000d4e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 fd63 	bl	8002850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff f9df 	bl	800014c <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d98:	080028f0 	.word	0x080028f0
  ldr r2, =_sbss
 8000d9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000da0:	2000015c 	.word	0x2000015c

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f92b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe68 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f935 	bl	8001062 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f90b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000158 	.word	0x20000158

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000158 	.word	0x20000158

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff90 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff49 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff5e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b08b      	sub	sp, #44	; 0x2c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e169      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001090:	2201      	movs	r2, #1
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8158 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a9a      	ldr	r2, [pc, #616]	; (800131c <HAL_GPIO_Init+0x2a0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d05e      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010b8:	4a98      	ldr	r2, [pc, #608]	; (800131c <HAL_GPIO_Init+0x2a0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d875      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010be:	4a98      	ldr	r2, [pc, #608]	; (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d058      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010c4:	4a96      	ldr	r2, [pc, #600]	; (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d86f      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ca:	4a96      	ldr	r2, [pc, #600]	; (8001324 <HAL_GPIO_Init+0x2a8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d052      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010d0:	4a94      	ldr	r2, [pc, #592]	; (8001324 <HAL_GPIO_Init+0x2a8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d869      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010d6:	4a94      	ldr	r2, [pc, #592]	; (8001328 <HAL_GPIO_Init+0x2ac>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d04c      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010dc:	4a92      	ldr	r2, [pc, #584]	; (8001328 <HAL_GPIO_Init+0x2ac>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d863      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010e2:	4a92      	ldr	r2, [pc, #584]	; (800132c <HAL_GPIO_Init+0x2b0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d046      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010e8:	4a90      	ldr	r2, [pc, #576]	; (800132c <HAL_GPIO_Init+0x2b0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d85d      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d82a      	bhi.n	8001148 <HAL_GPIO_Init+0xcc>
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d859      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <HAL_GPIO_Init+0x80>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001151 	.word	0x08001151
 8001104:	08001163 	.word	0x08001163
 8001108:	080011a5 	.word	0x080011a5
 800110c:	080011ab 	.word	0x080011ab
 8001110:	080011ab 	.word	0x080011ab
 8001114:	080011ab 	.word	0x080011ab
 8001118:	080011ab 	.word	0x080011ab
 800111c:	080011ab 	.word	0x080011ab
 8001120:	080011ab 	.word	0x080011ab
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011ab 	.word	0x080011ab
 800112c:	080011ab 	.word	0x080011ab
 8001130:	080011ab 	.word	0x080011ab
 8001134:	080011ab 	.word	0x080011ab
 8001138:	080011ab 	.word	0x080011ab
 800113c:	080011ab 	.word	0x080011ab
 8001140:	08001159 	.word	0x08001159
 8001144:	0800116d 	.word	0x0800116d
 8001148:	4a79      	ldr	r2, [pc, #484]	; (8001330 <HAL_GPIO_Init+0x2b4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114e:	e02c      	b.n	80011aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e029      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e024      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e01f      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	330c      	adds	r3, #12
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e01a      	b.n	80011ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117e:	2304      	movs	r3, #4
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e013      	b.n	80011ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	611a      	str	r2, [r3, #16]
          break;
 8001196:	e009      	b.n	80011ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	615a      	str	r2, [r3, #20]
          break;
 80011a2:	e003      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x130>
          break;
 80011aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2bff      	cmp	r3, #255	; 0xff
 80011b0:	d801      	bhi.n	80011b6 <HAL_GPIO_Init+0x13a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_Init+0x13e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2bff      	cmp	r3, #255	; 0xff
 80011c0:	d802      	bhi.n	80011c8 <HAL_GPIO_Init+0x14c>
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x152>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3b08      	subs	r3, #8
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	210f      	movs	r1, #15
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	6a39      	ldr	r1, [r7, #32]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80b1 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fc:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001214:	4a48      	ldr	r2, [pc, #288]	; (8001338 <HAL_GPIO_Init+0x2bc>)
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <HAL_GPIO_Init+0x2c0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1ec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_GPIO_Init+0x2c4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1e8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <HAL_GPIO_Init+0x2c8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <HAL_GPIO_Init+0x2cc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1e0>
 8001258:	2303      	movs	r3, #3
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 800125c:	2304      	movs	r3, #4
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001268:	2300      	movs	r3, #0
 800126a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127a:	492f      	ldr	r1, [pc, #188]	; (8001338 <HAL_GPIO_Init+0x2bc>)
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_GPIO_Init+0x2d0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	492c      	ldr	r1, [pc, #176]	; (800134c <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4928      	ldr	r1, [pc, #160]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4922      	ldr	r1, [pc, #136]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	491e      	ldr	r1, [pc, #120]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	4918      	ldr	r1, [pc, #96]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4914      	ldr	r1, [pc, #80]	; (800134c <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d021      	beq.n	8001350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_GPIO_Init+0x2d0>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
 8001318:	e021      	b.n	800135e <HAL_GPIO_Init+0x2e2>
 800131a:	bf00      	nop
 800131c:	10320000 	.word	0x10320000
 8001320:	10310000 	.word	0x10310000
 8001324:	10220000 	.word	0x10220000
 8001328:	10210000 	.word	0x10210000
 800132c:	10120000 	.word	0x10120000
 8001330:	10110000 	.word	0x10110000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40011000 	.word	0x40011000
 8001348:	40011400 	.word	0x40011400
 800134c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4909      	ldr	r1, [pc, #36]	; (8001380 <HAL_GPIO_Init+0x304>)
 800135a:	4013      	ands	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f47f ae8e 	bne.w	8001090 <HAL_GPIO_Init+0x14>
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	372c      	adds	r7, #44	; 0x2c
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e272      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8087 	beq.w	80014e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d4:	4b92      	ldr	r3, [pc, #584]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d00c      	beq.n	80013fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e0:	4b8f      	ldr	r3, [pc, #572]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d112      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
 80013ec:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d10b      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4b89      	ldr	r3, [pc, #548]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d06c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x12c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d168      	bne.n	80014e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e24c      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x76>
 800141c:	4b80      	ldr	r3, [pc, #512]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a7f      	ldr	r2, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e02e      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b7b      	ldr	r3, [pc, #492]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7a      	ldr	r2, [pc, #488]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a77      	ldr	r2, [pc, #476]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0xbc>
 8001456:	4b72      	ldr	r3, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a71      	ldr	r2, [pc, #452]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 8001470:	4b6b      	ldr	r3, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6a      	ldr	r2, [pc, #424]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a67      	ldr	r2, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fce2 	bl	8000e58 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcde 	bl	8000e58 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e200      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xe4>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fcce 	bl	8000e58 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fcca 	bl	8000e58 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1ec      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x10c>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ee:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b08      	cmp	r3, #8
 8001504:	d11c      	bne.n	8001540 <HAL_RCC_OscConfig+0x18c>
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e1c0      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4939      	ldr	r1, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	e03a      	b.n	80015b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fc83 	bl	8000e58 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fc7f 	bl	8000e58 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1a1      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4927      	ldr	r1, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fc62 	bl	8000e58 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fc5e 	bl	8000e58 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e180      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d03a      	beq.n	8001638 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d019      	beq.n	80015fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_RCC_OscConfig+0x274>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fc42 	bl	8000e58 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc3e 	bl	8000e58 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e160      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fad8 	bl	8001bac <RCC_Delay>
 80015fc:	e01c      	b.n	8001638 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_RCC_OscConfig+0x274>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fc28 	bl	8000e58 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160a:	e00f      	b.n	800162c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fc24 	bl	8000e58 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d908      	bls.n	800162c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e146      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	42420000 	.word	0x42420000
 8001628:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4b92      	ldr	r3, [pc, #584]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e9      	bne.n	800160c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a6 	beq.w	8001792 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b8b      	ldr	r3, [pc, #556]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10d      	bne.n	8001672 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a87      	ldr	r2, [pc, #540]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b85      	ldr	r3, [pc, #532]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166e:	2301      	movs	r3, #1
 8001670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b82      	ldr	r3, [pc, #520]	; (800187c <HAL_RCC_OscConfig+0x4c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4b7f      	ldr	r3, [pc, #508]	; (800187c <HAL_RCC_OscConfig+0x4c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7e      	ldr	r2, [pc, #504]	; (800187c <HAL_RCC_OscConfig+0x4c8>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168a:	f7ff fbe5 	bl	8000e58 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fbe1 	bl	8000e58 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	; 0x64
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e103      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b75      	ldr	r3, [pc, #468]	; (800187c <HAL_RCC_OscConfig+0x4c8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x312>
 80016b8:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e02d      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x334>
 80016ce:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a69      	ldr	r2, [pc, #420]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6213      	str	r3, [r2, #32]
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a66      	ldr	r2, [pc, #408]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	e01c      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d10c      	bne.n	800170a <HAL_RCC_OscConfig+0x356>
 80016f0:	4b61      	ldr	r3, [pc, #388]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a60      	ldr	r2, [pc, #384]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a5d      	ldr	r2, [pc, #372]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a5a      	ldr	r2, [pc, #360]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a57      	ldr	r2, [pc, #348]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d015      	beq.n	8001756 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb95 	bl	8000e58 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb91 	bl	8000e58 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0b1      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ee      	beq.n	8001732 <HAL_RCC_OscConfig+0x37e>
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb7f 	bl	8000e58 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fb7b 	bl	8000e58 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e09b      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	4b40      	ldr	r3, [pc, #256]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ee      	bne.n	800175e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d105      	bne.n	8001792 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a3b      	ldr	r2, [pc, #236]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8087 	beq.w	80018aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d061      	beq.n	800186c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d146      	bne.n	800183e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b0:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb4f 	bl	8000e58 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fb4b 	bl	8000e58 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e06d      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d108      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4921      	ldr	r1, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a19      	ldr	r1, [r3, #32]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	430b      	orrs	r3, r1
 800180a:	491b      	ldr	r1, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fb1f 	bl	8000e58 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff fb1b 	bl	8000e58 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e03d      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x46a>
 800183c:	e035      	b.n	80018aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb08 	bl	8000e58 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fb04 	bl	8000e58 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e026      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x498>
 800186a:	e01e      	b.n	80018aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e019      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
 8001878:	40021000 	.word	0x40021000
 800187c:	40007000 	.word	0x40007000
 8001880:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_OscConfig+0x500>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	429a      	cmp	r2, r3
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0d0      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d910      	bls.n	80018fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0207 	bic.w	r2, r3, #7
 80018e2:	4965      	ldr	r1, [pc, #404]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001936:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d040      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d115      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e073      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06b      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f023 0203 	bic.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4936      	ldr	r1, [pc, #216]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a8:	f7ff fa56 	bl	8000e58 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7ff fa52 	bl	8000e58 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e053      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 020c 	and.w	r2, r3, #12
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1eb      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d210      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 0207 	bic.w	r2, r3, #7
 80019ee:	4922      	ldr	r1, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1cc>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1d0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f9b4 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	080028d0 	.word	0x080028d0
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	b490      	push	{r4, r7}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a94:	1d3c      	adds	r4, r7, #4
 8001a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a9c:	f240 2301 	movw	r3, #513	; 0x201
 8001aa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x46>
 8001aca:	e02b      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ace:	623b      	str	r3, [r7, #32]
      break;
 8001ad0:	e02b      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	0c9b      	lsrs	r3, r3, #18
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3328      	adds	r3, #40	; 0x28
 8001adc:	443b      	add	r3, r7
 8001ade:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ae2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0c5b      	lsrs	r3, r3, #17
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	3328      	adds	r3, #40	; 0x28
 8001afa:	443b      	add	r3, r7
 8001afc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b06:	fb03 f202 	mul.w	r2, r3, r2
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	e004      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	623b      	str	r3, [r7, #32]
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b26:	623b      	str	r3, [r7, #32]
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc90      	pop	{r4, r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	080028c0 	.word	0x080028c0
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	007a1200 	.word	0x007a1200
 8001b44:	003d0900 	.word	0x003d0900

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff2 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	080028e0 	.word	0x080028e0

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0adb      	lsrs	r3, r3, #11
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	080028e0 	.word	0x080028e0

08001bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <RCC_Delay+0x34>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <RCC_Delay+0x38>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0a5b      	lsrs	r3, r3, #9
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc8:	bf00      	nop
  }
  while (Delay --);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	60fa      	str	r2, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f9      	bne.n	8001bc8 <RCC_Delay+0x1c>
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000
 8001be4:	10624dd3 	.word	0x10624dd3

08001be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe ff74 	bl	8000afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f98e 	bl	8001f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_TIM_PWM_Start+0x24>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e022      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x6a>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d109      	bne.n	8001cc6 <HAL_TIM_PWM_Start+0x3e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	e015      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x6a>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d109      	bne.n	8001ce0 <HAL_TIM_PWM_Start+0x58>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	bf14      	ite	ne
 8001cd8:	2301      	movne	r3, #1
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e008      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x6a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e05e      	b.n	8001db8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x82>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	e013      	b.n	8001d32 <HAL_TIM_PWM_Start+0xaa>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_PWM_Start+0x92>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	e00b      	b.n	8001d32 <HAL_TIM_PWM_Start+0xaa>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d104      	bne.n	8001d2a <HAL_TIM_PWM_Start+0xa2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	e003      	b.n	8001d32 <HAL_TIM_PWM_Start+0xaa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 faee 	bl	800231c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_TIM_PWM_Start+0x138>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d107      	bne.n	8001d5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_TIM_PWM_Start+0x138>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00e      	beq.n	8001d82 <HAL_TIM_PWM_Start+0xfa>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6c:	d009      	beq.n	8001d82 <HAL_TIM_PWM_Start+0xfa>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_TIM_PWM_Start+0x13c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d004      	beq.n	8001d82 <HAL_TIM_PWM_Start+0xfa>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_TIM_PWM_Start+0x140>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d111      	bne.n	8001da6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d010      	beq.n	8001db6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	e007      	b.n	8001db6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40012c00 	.word	0x40012c00
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40000800 	.word	0x40000800

08001dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e0ac      	b.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	f200 809f 	bhi.w	8001f34 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e31 	.word	0x08001e31
 8001e00:	08001f35 	.word	0x08001f35
 8001e04:	08001f35 	.word	0x08001f35
 8001e08:	08001f35 	.word	0x08001f35
 8001e0c:	08001e71 	.word	0x08001e71
 8001e10:	08001f35 	.word	0x08001f35
 8001e14:	08001f35 	.word	0x08001f35
 8001e18:	08001f35 	.word	0x08001f35
 8001e1c:	08001eb3 	.word	0x08001eb3
 8001e20:	08001f35 	.word	0x08001f35
 8001e24:	08001f35 	.word	0x08001f35
 8001e28:	08001f35 	.word	0x08001f35
 8001e2c:	08001ef3 	.word	0x08001ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f8e8 	bl	800200c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0208 	orr.w	r2, r2, #8
 8001e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0204 	bic.w	r2, r2, #4
 8001e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6999      	ldr	r1, [r3, #24]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	619a      	str	r2, [r3, #24]
      break;
 8001e6e:	e062      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f92e 	bl	80020d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6999      	ldr	r1, [r3, #24]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	021a      	lsls	r2, r3, #8
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	619a      	str	r2, [r3, #24]
      break;
 8001eb0:	e041      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f977 	bl	80021ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0208 	orr.w	r2, r2, #8
 8001ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0204 	bic.w	r2, r2, #4
 8001edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69d9      	ldr	r1, [r3, #28]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	61da      	str	r2, [r3, #28]
      break;
 8001ef0:	e021      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f9c1 	bl	8002280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69d9      	ldr	r1, [r3, #28]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	021a      	lsls	r2, r3, #8
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	61da      	str	r2, [r3, #28]
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a29      	ldr	r2, [pc, #164]	; (8002000 <TIM_Base_SetConfig+0xb8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00b      	beq.n	8001f78 <TIM_Base_SetConfig+0x30>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f66:	d007      	beq.n	8001f78 <TIM_Base_SetConfig+0x30>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <TIM_Base_SetConfig+0xbc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <TIM_Base_SetConfig+0x30>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a25      	ldr	r2, [pc, #148]	; (8002008 <TIM_Base_SetConfig+0xc0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <TIM_Base_SetConfig+0xb8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00b      	beq.n	8001faa <TIM_Base_SetConfig+0x62>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d007      	beq.n	8001faa <TIM_Base_SetConfig+0x62>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <TIM_Base_SetConfig+0xbc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d003      	beq.n	8001faa <TIM_Base_SetConfig+0x62>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <TIM_Base_SetConfig+0xc0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d108      	bne.n	8001fbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a07      	ldr	r2, [pc, #28]	; (8002000 <TIM_Base_SetConfig+0xb8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d103      	bne.n	8001ff0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800

0800200c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	f023 0201 	bic.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0302 	bic.w	r3, r3, #2
 8002054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <TIM_OC1_SetConfig+0xc8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d10c      	bne.n	8002082 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f023 0308 	bic.w	r3, r3, #8
 800206e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <TIM_OC1_SetConfig+0xc8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d111      	bne.n	80020ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	621a      	str	r2, [r3, #32]
}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40012c00 	.word	0x40012c00

080020d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f023 0210 	bic.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0320 	bic.w	r3, r3, #32
 8002122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <TIM_OC2_SetConfig+0xd0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d10d      	bne.n	8002154 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800213e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <TIM_OC2_SetConfig+0xd0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d113      	bne.n	8002184 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800216a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	621a      	str	r2, [r3, #32]
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012c00 	.word	0x40012c00

080021ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <TIM_OC3_SetConfig+0xd0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10d      	bne.n	8002226 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <TIM_OC3_SetConfig+0xd0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d113      	bne.n	8002256 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800223c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	621a      	str	r2, [r3, #32]
}
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40012c00 	.word	0x40012c00

08002280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	031b      	lsls	r3, r3, #12
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <TIM_OC4_SetConfig+0x98>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d109      	bne.n	80022f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	621a      	str	r2, [r3, #32]
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40012c00 	.word	0x40012c00

0800231c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2201      	movs	r2, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a1a      	ldr	r2, [r3, #32]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a1a      	ldr	r2, [r3, #32]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002378:	2302      	movs	r3, #2
 800237a:	e046      	b.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d009      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10c      	bne.n	80023f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800

08002420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002438:	2302      	movs	r3, #2
 800243a:	e03d      	b.n	80024b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e03f      	b.n	8002554 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe fbbd 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2224      	movs	r2, #36	; 0x24
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002504:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f914 	bl	8002734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800251a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800252a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	f040 808c 	bne.w	8002696 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_UART_Receive+0x2e>
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e084      	b.n	8002698 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_UART_Receive+0x40>
 8002598:	2302      	movs	r3, #2
 800259a:	e07d      	b.n	8002698 <HAL_UART_Receive+0x13c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2222      	movs	r2, #34	; 0x22
 80025ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fc4e 	bl	8000e58 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d2:	d108      	bne.n	80025e6 <HAL_UART_Receive+0x8a>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d104      	bne.n	80025e6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e003      	b.n	80025ee <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80025f6:	e043      	b.n	8002680 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2200      	movs	r2, #0
 8002600:	2120      	movs	r1, #32
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f84c 	bl	80026a0 <UART_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e042      	b.n	8002698 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10c      	bne.n	8002632 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	b29a      	uxth	r2, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	3302      	adds	r3, #2
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e01f      	b.n	8002672 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263a:	d007      	beq.n	800264c <HAL_UART_Receive+0xf0>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <HAL_UART_Receive+0xfe>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e008      	b.n	800266c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002666:	b2da      	uxtb	r2, r3
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3301      	adds	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1b6      	bne.n	80025f8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b0:	e02c      	b.n	800270c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d028      	beq.n	800270c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80026c0:	f7fe fbca 	bl	8000e58 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d21d      	bcs.n	800270c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e00f      	b.n	800272c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	429a      	cmp	r2, r3
 8002728:	d0c3      	beq.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800276e:	f023 030c 	bic.w	r3, r3, #12
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	430b      	orrs	r3, r1
 800277a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <UART_SetConfig+0x114>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d103      	bne.n	80027a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800279c:	f7ff f9f2 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	e002      	b.n	80027aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027a4:	f7ff f9da 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009a      	lsls	r2, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <UART_SetConfig+0x118>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	0119      	lsls	r1, r3, #4
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <UART_SetConfig+0x118>)
 80027e2:	fba3 0302 	umull	r0, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2064      	movs	r0, #100	; 0x64
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	3332      	adds	r3, #50	; 0x32
 80027f4:	4a15      	ldr	r2, [pc, #84]	; (800284c <UART_SetConfig+0x118>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002800:	4419      	add	r1, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009a      	lsls	r2, r3, #2
 800280c:	441a      	add	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fbb2 f2f3 	udiv	r2, r2, r3
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <UART_SetConfig+0x118>)
 800281a:	fba3 0302 	umull	r0, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2064      	movs	r0, #100	; 0x64
 8002822:	fb00 f303 	mul.w	r3, r0, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	3332      	adds	r3, #50	; 0x32
 800282c:	4a07      	ldr	r2, [pc, #28]	; (800284c <UART_SetConfig+0x118>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	f003 020f 	and.w	r2, r3, #15
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	440a      	add	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40013800 	.word	0x40013800
 800284c:	51eb851f 	.word	0x51eb851f

08002850 <__libc_init_array>:
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	2600      	movs	r6, #0
 8002854:	4d0c      	ldr	r5, [pc, #48]	; (8002888 <__libc_init_array+0x38>)
 8002856:	4c0d      	ldr	r4, [pc, #52]	; (800288c <__libc_init_array+0x3c>)
 8002858:	1b64      	subs	r4, r4, r5
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	42a6      	cmp	r6, r4
 800285e:	d109      	bne.n	8002874 <__libc_init_array+0x24>
 8002860:	f000 f822 	bl	80028a8 <_init>
 8002864:	2600      	movs	r6, #0
 8002866:	4d0a      	ldr	r5, [pc, #40]	; (8002890 <__libc_init_array+0x40>)
 8002868:	4c0a      	ldr	r4, [pc, #40]	; (8002894 <__libc_init_array+0x44>)
 800286a:	1b64      	subs	r4, r4, r5
 800286c:	10a4      	asrs	r4, r4, #2
 800286e:	42a6      	cmp	r6, r4
 8002870:	d105      	bne.n	800287e <__libc_init_array+0x2e>
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	f855 3b04 	ldr.w	r3, [r5], #4
 8002878:	4798      	blx	r3
 800287a:	3601      	adds	r6, #1
 800287c:	e7ee      	b.n	800285c <__libc_init_array+0xc>
 800287e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002882:	4798      	blx	r3
 8002884:	3601      	adds	r6, #1
 8002886:	e7f2      	b.n	800286e <__libc_init_array+0x1e>
 8002888:	080028e8 	.word	0x080028e8
 800288c:	080028e8 	.word	0x080028e8
 8002890:	080028e8 	.word	0x080028e8
 8002894:	080028ec 	.word	0x080028ec

08002898 <memset>:
 8002898:	4603      	mov	r3, r0
 800289a:	4402      	add	r2, r0
 800289c:	4293      	cmp	r3, r2
 800289e:	d100      	bne.n	80028a2 <memset+0xa>
 80028a0:	4770      	bx	lr
 80028a2:	f803 1b01 	strb.w	r1, [r3], #1
 80028a6:	e7f9      	b.n	800289c <memset+0x4>

080028a8 <_init>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr

080028b4 <_fini>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr
